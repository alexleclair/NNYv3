package{	import SocketManager;	import dataTypes.*	import flash.utils.ByteArray;	import DownloadManager;	public class RealmClient extends SocketManager	{				private var dlManager:DownloadManager;				/*		 *	@params		host:String, port:int		 *	@desc		connects to ge fiven host and port.		 *	@returns	void		 */		public function RealmClient(host:String, port:int) // constructor		{			trace("realmClient.as: Connecting to "+host+":"+port);			dlManager=new DownloadManager();			super(host, port);		}				override protected function onSocketConnect():void		{			//preparePacket(247, "Now connected to you, take good care of me!");						sendPackets();		}				/*		 *	@params		packet:ByteArray		 *	@desc		Handles the unknown amount of packets(from the Capsule).		 *	@returns	void		 */		override protected function handlePackets(packet:ByteArray)		{			while(packet.bytesAvailable > 0)			{				var cmdID:int = packet.readShort(); 				trace('CMDID: '+cmdID);				switch(cmdID)				{					case Global.PCKT_R_WELCOME: //Welcome								preparePacket(2, 0)								preparePacket(9898417, "Allo, patates douces");								break;					case Global.PCKT_R_DOWNLOAD: //Client download URL								 dlManager.appendFile(packet.readUnsignedInt(), packet.readUTFBytes(packet.readUnsignedInt()), packet.readUTFBytes(packet.readUnsignedInt()))								 break;					case Global.PCKT_R_DOWNLOAD_EOF: //Download EOF								 preparePacket(0x14);								 break;					case Global.PCKT_R_WORLD: //WorlsList response								 var world:Object = new Object();								 world['ipv4'] = packet.readUTFBytes(packet.readUnsignedInt());								 world['port'] = packet.readShort();								 world['name'] = packet.readUTFBytes(packet.readUnsignedInt());								 world['online'] = packet.readBoolean();								 world['flag'] = packet.readByte();								 for(var key in world)								 {									 trace(key + ": " + world[key]);								 }								 break;										case Global.PCKT_R_WORLD_EOF: //WORLDLIST_EOF								 dlManager.downloadFiles();								 new WorldClient("192.168.2.23", 6132);								 break;										case Global.PCKT_X_DEBUG : //_DEBUG: Show remote debug string on console								 trace("[REMOTE DEBUG] "+packet.readUTFBytes(packet.readUnsignedInt()));					default: return;				}			}			sendPackets();		}				/*******************************************************************/				/*		 *	Private packet handling methods.		 *	Those are called from handlePackets() to handle everything coming from the RS.		 */		 		 /*		 *	@params		revision:int		 *	@desc		Checks if the client's revision is different from the server's. If so, it requests a file list for downloadManager.		 *	@returns	void		 */		 private function checkRevision(revision:int):void		 {			 trace("checkRevision() called!");			if(ClientInterface.clientRevision != revision)			{				trace('Revisions are different (C: '+ClientInterface.clientRevision+' S: '+revision+')! Requesting file-list from the RS');				preparePacket(2, ClientInterface.clientRevision);				sendPackets();			}			else trace('Revisions are the same! Going on...');		 }			}}
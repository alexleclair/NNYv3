package{	import flash.events.*;	import flash.net.*;	import flash.filesystem.*;	import flash.utils.ByteArray;	public class DownloadManager	{		private var files:Array;		private var m_revision:int=0;		private var m_downloading:Boolean=false;		private var urlStream:URLStream;		private var urlRequest:URLRequest;		private var fs:FileStream;		/*		 *	@params		None		 *	@desc		Resets the member variables.		 *	@returns	void		 */		public function DownloadManager()//Constructor		{			files=new Array();						TopLevel.root.dlm_UI.progress_revision.setProgress(87,100);			TopLevel.root.dlm_UI.progress_total.setProgress(77,100);		}				/*		 *	@params		downloadURL:String, relativePath:String		 *	@desc		Pushes the given file into a "to-be-downloaded" list, waiting for the revision to be set 		 *	@returns	void		 */		public function appendFile(fileRevision:uint, downloadURL:String, relativePath:String)		{			trace("DownloadManager.as: revision:" + fileRevision + " Appending URL '"+downloadURL+"', '"+relativePath+"'");			var appendThis:Array = new Array();			appendThis.push(downloadURL, relativePath);			files.push(appendThis);		}				/*		 *	@params		none		 *	@desc		Gets url's content and pushes it into the local relativePath file.		 *	@returns	void		 */		public function downloadFiles()		{			if(files.length < 1 || m_downloading) return;			m_downloading=true;			urlStream = new URLStream();			urlRequest = new URLRequest(files[0][0]);			fs = new FileStream();			urlStream.addEventListener(Event.COMPLETE, completeHandler);			urlStream.addEventListener(ProgressEvent.PROGRESS, progressEvent);			//Create directories if needed			trace('-----------');			trace(files[0][1]);			var pieces:Array = files[0][1].split('/');			var currentDirectory:String = '';			for(var i=0; i<pieces.length-1; ++i)			{				currentDirectory += '/'+pieces[i]				var dir:File = new File(currentDirectory);				if(!dir.exists)				{					dir.createDirectory();					trace(pieces[i]);				}			}						var file:File = new File('app-storage:' + files[0][1]);// File.applicationDirectory.resolvePath("./"+files[0][1]);			trace(File.applicationStorageDirectory.url);			fs.openAsync(file, FileMode.WRITE);			urlStream.load(urlRequest);		}				/***********************************/		private function completeHandler(e:Event)		{			var dataBuffer:ByteArray = new ByteArray();            urlStream.readBytes(dataBuffer, 0, urlStream.bytesAvailable);            fs.writeBytes(dataBuffer, 0, dataBuffer.length);			fs.close();			urlStream.close();			m_downloading=false;			files.splice(0,1);			downloadFiles();		}				private function progressEvent(e:ProgressEvent)		{			trace('PROGRESS');			TopLevel.root.dlm_UI.progress_revision.setProgress(e.bytesLoaded,e.bytesTotal);			var dataBuffer = new ByteArray();            urlStream.readBytes(dataBuffer, 0, urlStream.bytesAvailable);            fs.writeBytes(dataBuffer, 0, dataBuffer.length);		}	}}